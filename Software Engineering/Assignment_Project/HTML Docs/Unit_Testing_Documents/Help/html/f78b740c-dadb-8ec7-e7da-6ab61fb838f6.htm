<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Assert.ThrowsExceptionAsync&lt;T&gt;(Func&lt;Task&gt;, String) Method</title><meta name="Title" content="ThrowsExceptionAsync&lt;T&gt;(Func&lt;Task&gt;, String)" /><meta name="Help.Id" content="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync``1(System.Func{System.Threading.Tasks.Task},System.String)" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Microsoft.VisualStudio.TestTools.UnitTesting" /><meta name="guid" content="f78b740c-dadb-8ec7-e7da-6ab61fb838f6" /><meta name="Description" content="Tests whether the code specified by delegate throws exact given exception of type (and not of derived type) and throws AssertFailedException if code does not throws exception or throws exception of type other than ." /><meta name="tocFile" content="../toc/IDTCC0DB0.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Assert<span id="LST11D9D24B_0" data-languageSpecificText="cpp=::|nu=."></span>Throws<wbr />Exception<wbr />Async<span id="LST11D9D24B_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST11D9D24B_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>(Func<span id="LST11D9D24B_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span>Task<span id="LST11D9D24B_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, String) Method</h1><div class="summary">
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="153fa9a6-2752-6415-48c1-3e793872a6dd.htm">Microsoft.VisualStudio.TestTools.UnitTesting</a><br /><strong>Assembly:</strong> Microsoft.VisualStudio.TestPlatform.TestFramework (in Microsoft.VisualStudio.TestPlatform.TestFramework.dll) Version: 14.0.7126.11<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Task</span>&lt;T&gt; <span class="identifier">ThrowsExceptionAsync</span>&lt;T&gt;(
	<span class="identifier">Func</span>&lt;<span class="identifier">Task</span>&gt; <span class="parameter">action</span>,
	<span class="identifier">string</span> <span class="parameter">message</span>
)
<span class="keyword">where</span> T : <span class="identifier">Exception</span>
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">ThrowsExceptionAsync</span>(<span class="keyword">Of</span> T <span class="keyword">As</span> <span class="identifier">Exception</span>) ( 
	<span class="parameter">action</span> <span class="keyword">As</span> <span class="identifier">Func</span>(<span class="keyword">Of</span> <span class="identifier">Task</span>),
	<span class="parameter">message</span> <span class="keyword">As</span> <span class="identifier">String</span>
) <span class="keyword">As</span> <span class="identifier">Task</span>(<span class="keyword">Of</span> T)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T&gt;
<span class="keyword">where</span> T : <span class="identifier">Exception</span>
<span class="keyword">static</span> <span class="identifier">Task</span>&lt;T&gt;^ <span class="identifier">ThrowsExceptionAsync</span>(
	<span class="identifier">Func</span>&lt;<span class="identifier">Task</span>^&gt;^ <span class="parameter">action</span>, 
	<span class="identifier">String</span>^ <span class="parameter">message</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">ThrowsExceptionAsync</span> : 
        <span class="parameter">action</span> : <span class="identifier">Func</span>&lt;<span class="identifier">Task</span>&gt; * 
        <span class="parameter">message</span> : <span class="identifier">string</span> <span class="keyword">-&gt;</span> <span class="identifier">Task</span>&lt;'T&gt;  <span class="keyword">when</span> 'T : <span class="identifier">Exception</span></code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">action</span>  <span class="noLink">Func</span><span id="LST11D9D24B_5" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="noLink">Task</span><span id="LST11D9D24B_6" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>Delegate to code to be tested and which is expected to throw exception.</dd><dt class="has-text-weight-normal"><span class="parameter">message</span>  <span class="noLink">String</span></dt><dd>
            The message to include in the exception when <span class="parameter">action</span>
            does not throws exception of type <span class="parameter">T</span>.
            </dd></dl><h4 class="quickLinkHeader">Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd>Type of exception expected to be thrown.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><span class="noLink">Task</span><span id="LST11D9D24B_7" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LST11D9D24B_8" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />
            The <span class="noLink">Task</span> executing the delegate.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDECSection"><table class="table is-hoverable"><tr><td><a href="b6216b24-d46f-b983-98ee-ff1d7f43bc39.htm">AssertFailedException</a></td><td>
            Thrown if <span class="parameter">action</span> does not throws exception of type <span class="parameter">T</span>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="59e52a5a-35c1-5291-e1a1-6e392b04e9c9.htm">Assert Class</a></div><div><a href="82aa1438-9462-31bd-7888-3e39786ad07b.htm">ThrowsExceptionAsync Overload</a></div><div><a href="153fa9a6-2752-6415-48c1-3e793872a6dd.htm">Microsoft.VisualStudio.TestTools.UnitTesting Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Type Parameters</a></li><li><a class="quickLink">Return Value</a></li></ul></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>