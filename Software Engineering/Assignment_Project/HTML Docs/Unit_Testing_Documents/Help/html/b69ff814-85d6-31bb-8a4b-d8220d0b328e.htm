<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Assert.AreEqual Method</title><meta name="Title" content="AreEqual" /><meta name="Help.Id" content="Overload:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Microsoft.VisualStudio.TestTools.UnitTesting" /><meta name="guid" content="b69ff814-85d6-31bb-8a4b-d8220d0b328e" /><meta name="tocFile" content="../toc/IDCC0DB0.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Assert<span id="LST482EF472_0" data-languageSpecificText="cpp=::|nu=."></span>Are<wbr />Equal Method</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Overload List</h2><div id="IDACASection"><table id="OverloadList" class="table is-hoverable"><tr><td><a href="85e61c1f-9db5-5ba6-dfd0-2b87874e20d7.htm">AreEqual(Object, Object)</a></td><td>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="3ce3f8c4-0950-81ff-5ccd-b1d4c6eb3620.htm">AreEqual(Decimal, Decimal, Decimal)</a></td><td>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="fc325069-da19-eb40-e7f4-ef96c2b14eed.htm">AreEqual(Double, Double, Double)</a></td><td>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="d220da69-ea85-c4be-586b-a69b9c5640ac.htm">AreEqual(Int64, Int64, Int64)</a></td><td>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="df0b5beb-829d-2379-5e82-27f66361dc6a.htm">AreEqual(Object, Object, String)</a></td><td>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="33e4c922-50cb-fb56-cf40-371604747388.htm">AreEqual(Single, Single, Single)</a></td><td>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="a2cbfc69-f9ee-1f3c-7511-8226e7ad0302.htm">AreEqual(String, String, Boolean)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="c8f4c25a-d9a2-1742-50ee-91586f8d322f.htm">AreEqual(Decimal, Decimal, Decimal, String)</a></td><td>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="9f9e7731-7243-6e5d-7767-fa90d67f147a.htm">AreEqual(Double, Double, Double, String)</a></td><td>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="7a511bf9-667c-42fa-1ce7-af937623fe4a.htm">AreEqual(Int64, Int64, Int64, String)</a></td><td>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="9d483181-de01-dad8-054f-87d19a1b1b69.htm">AreEqual(Object, Object, String, <span id="LST482EF472_1" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_2" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="af7239af-a258-6872-ac6f-d854c1167a61.htm">AreEqual(Single, Single, Single, String)</a></td><td>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="60a7e256-6b04-7301-db43-8476405a6103.htm">AreEqual(String, String, Boolean, CultureInfo)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="320a111d-0c3d-7a40-c32a-384008325e04.htm">AreEqual(String, String, Boolean, String)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="f3f57250-377a-ad86-a835-464ce9b0d40a.htm">AreEqual(Decimal, Decimal, Decimal, String, <span id="LST482EF472_3" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_4" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="c7e49be8-8067-8093-2fbf-ec5516a008c3.htm">AreEqual(Double, Double, Double, String, <span id="LST482EF472_5" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_6" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="f92e45c8-cc82-6833-ed70-be70d9722516.htm">AreEqual(Int64, Int64, Int64, String, <span id="LST482EF472_7" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_8" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="b4f6fa24-85ba-1b4f-0319-189e6bcde41d.htm">AreEqual(Single, Single, Single, String, <span id="LST482EF472_9" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_10" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="d3a3ecdc-90b4-3305-7b4a-46e5b2254c73.htm">AreEqual(String, String, Boolean, CultureInfo, String)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="986f055d-8436-2cf2-e787-8fa2422b3d4c.htm">AreEqual(String, String, Boolean, String, <span id="LST482EF472_11" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_12" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="a8d42862-ec88-b91d-410e-d94fa9ad788c.htm">AreEqual(String, String, Boolean, CultureInfo, String, <span id="LST482EF472_13" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_14" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="1f016121-6aab-a22b-323d-c5c835454d15.htm">AreEqual<span id="LST482EF472_15" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST482EF472_16" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T)</a></td><td>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="ee557b78-dd96-e9c5-9d9b-b18ef2429fd6.htm">AreEqual<span id="LST482EF472_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST482EF472_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T, String)</a></td><td>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="711305b5-b8a5-de5e-a2e1-a019ff2870c7.htm">AreEqual<span id="LST482EF472_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST482EF472_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T, String, <span id="LST482EF472_21" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST482EF472_22" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="59e52a5a-35c1-5291-e1a1-6e392b04e9c9.htm">Assert Class</a></div><div><a href="153fa9a6-2752-6415-48c1-3e793872a6dd.htm">Microsoft.VisualStudio.TestTools.UnitTesting Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Overload List</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>