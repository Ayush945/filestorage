<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Assert Class</title><meta name="Title" content="Assert" /><meta name="Help.Id" content="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Microsoft.VisualStudio.TestTools.UnitTesting" /><meta name="guid" content="59e52a5a-35c1-5291-e1a1-6e392b04e9c9" /><meta name="Description" content="A collection of helper classes to test various conditions within unit tests. If the condition being tested is not met, an exception is thrown." /><meta name="tocFile" content="../toc/ID0DB0.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Assert Class</h1><div class="summary">
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="153fa9a6-2752-6415-48c1-3e793872a6dd.htm">Microsoft.VisualStudio.TestTools.UnitTesting</a><br /><strong>Assembly:</strong> Microsoft.VisualStudio.TestPlatform.TestFramework (in Microsoft.VisualStudio.TestPlatform.TestFramework.dll) Version: 14.0.7126.11<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">Assert</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">Assert</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Assert</span> <span class="keyword">sealed</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">Assert</span> = <span class="keyword">class</span> <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><span class="noLink">Object</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Assert</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDBEASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="116db10f-8ed9-77b5-b7e7-25cde0a4233e.htm">Assert</a></td><td>Initializes a new instance of the <span class="selflink">Assert</span> class</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDZEASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="f1524c3d-8980-979c-7c61-ee62467f0a69.htm">That</a></td><td>
            Gets the singleton instance of the Assert functionality.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDGEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="85e61c1f-9db5-5ba6-dfd0-2b87874e20d7.htm">AreEqual(Object, Object)</a></td><td>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="3ce3f8c4-0950-81ff-5ccd-b1d4c6eb3620.htm">AreEqual(Decimal, Decimal, Decimal)</a></td><td>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="fc325069-da19-eb40-e7f4-ef96c2b14eed.htm">AreEqual(Double, Double, Double)</a></td><td>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="d220da69-ea85-c4be-586b-a69b9c5640ac.htm">AreEqual(Int64, Int64, Int64)</a></td><td>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="df0b5beb-829d-2379-5e82-27f66361dc6a.htm">AreEqual(Object, Object, String)</a></td><td>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="33e4c922-50cb-fb56-cf40-371604747388.htm">AreEqual(Single, Single, Single)</a></td><td>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="a2cbfc69-f9ee-1f3c-7511-8226e7ad0302.htm">AreEqual(String, String, Boolean)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="c8f4c25a-d9a2-1742-50ee-91586f8d322f.htm">AreEqual(Decimal, Decimal, Decimal, String)</a></td><td>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="9f9e7731-7243-6e5d-7767-fa90d67f147a.htm">AreEqual(Double, Double, Double, String)</a></td><td>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="7a511bf9-667c-42fa-1ce7-af937623fe4a.htm">AreEqual(Int64, Int64, Int64, String)</a></td><td>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="9d483181-de01-dad8-054f-87d19a1b1b69.htm">AreEqual(Object, Object, String, <span id="LSTFA149C3B_0" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_1" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="af7239af-a258-6872-ac6f-d854c1167a61.htm">AreEqual(Single, Single, Single, String)</a></td><td>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="60a7e256-6b04-7301-db43-8476405a6103.htm">AreEqual(String, String, Boolean, CultureInfo)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="320a111d-0c3d-7a40-c32a-384008325e04.htm">AreEqual(String, String, Boolean, String)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="f3f57250-377a-ad86-a835-464ce9b0d40a.htm">AreEqual(Decimal, Decimal, Decimal, String, <span id="LSTFA149C3B_2" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="c7e49be8-8067-8093-2fbf-ec5516a008c3.htm">AreEqual(Double, Double, Double, String, <span id="LSTFA149C3B_4" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="f92e45c8-cc82-6833-ed70-be70d9722516.htm">AreEqual(Int64, Int64, Int64, String, <span id="LSTFA149C3B_6" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_7" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="b4f6fa24-85ba-1b4f-0319-189e6bcde41d.htm">AreEqual(Single, Single, Single, String, <span id="LSTFA149C3B_8" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_9" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="d3a3ecdc-90b4-3305-7b4a-46e5b2254c73.htm">AreEqual(String, String, Boolean, CultureInfo, String)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="986f055d-8436-2cf2-e787-8fa2422b3d4c.htm">AreEqual(String, String, Boolean, String, <span id="LSTFA149C3B_10" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_11" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="a8d42862-ec88-b91d-410e-d94fa9ad788c.htm">AreEqual(String, String, Boolean, CultureInfo, String, <span id="LSTFA149C3B_12" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_13" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </td></tr><tr><td><a href="1f016121-6aab-a22b-323d-c5c835454d15.htm">AreEqual<span id="LSTFA149C3B_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T)</a></td><td>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="ee557b78-dd96-e9c5-9d9b-b18ef2429fd6.htm">AreEqual<span id="LSTFA149C3B_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T, String)</a></td><td>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="711305b5-b8a5-de5e-a2e1-a019ff2870c7.htm">AreEqual<span id="LSTFA149C3B_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T, String, <span id="LSTFA149C3B_20" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_21" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="6ad8fd03-f480-2df4-307e-108a23b97ca2.htm">AreNotEqual(Object, Object)</a></td><td>
            Tests whether the specified objects are unequal and throws an exception
            if the two objects are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="fa814957-8b7f-79aa-94b0-785ea36adfb1.htm">AreNotEqual(Decimal, Decimal, Decimal)</a></td><td>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="adccf6b1-ea3d-7518-27d7-6e55a66ed7cf.htm">AreNotEqual(Double, Double, Double)</a></td><td>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="70844e04-d848-68ed-4a26-9a8b552f5879.htm">AreNotEqual(Int64, Int64, Int64)</a></td><td>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="fd55435c-42b9-2f6f-552d-2378658b9f87.htm">AreNotEqual(Object, Object, String)</a></td><td>
            Tests whether the specified objects are unequal and throws an exception
            if the two objects are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="9d0d0825-03b7-0e78-1517-77b6fe6f7c58.htm">AreNotEqual(Single, Single, Single)</a></td><td>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="114e2212-f065-6f70-094b-55b41206ae9d.htm">AreNotEqual(String, String, Boolean)</a></td><td>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="2921aa50-f26a-964c-7d78-51c6d8831399.htm">AreNotEqual(Decimal, Decimal, Decimal, String)</a></td><td>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="7efe5bd2-86c0-00bb-ceda-9624872a40e5.htm">AreNotEqual(Double, Double, Double, String)</a></td><td>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="544e6e16-a281-b0d8-0204-d712099f0ce3.htm">AreNotEqual(Int64, Int64, Int64, String)</a></td><td>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="740129ef-4b22-2605-d3f6-e81ce7b17d81.htm">AreNotEqual(Object, Object, String, <span id="LSTFA149C3B_22" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_23" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified objects are unequal and throws an exception
            if the two objects are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="36674cc5-dcaa-9695-5e76-897f7980dc34.htm">AreNotEqual(Single, Single, Single, String)</a></td><td>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="6ca1ff31-7357-a5d5-6dc7-ca30afa7c4bb.htm">AreNotEqual(String, String, Boolean, CultureInfo)</a></td><td>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="5a198fc4-2d9c-4764-d782-38d29bf63320.htm">AreNotEqual(String, String, Boolean, String)</a></td><td>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="f3959906-d55e-6ac6-5e97-2dfbc2b68757.htm">AreNotEqual(Decimal, Decimal, Decimal, String, <span id="LSTFA149C3B_24" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_25" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="7854d8c3-a36e-1110-42db-d70a226cf7b5.htm">AreNotEqual(Double, Double, Double, String, <span id="LSTFA149C3B_26" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_27" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="9752ce2b-2b41-17f8-dad6-de6f2730cabd.htm">AreNotEqual(Int64, Int64, Int64, String, <span id="LSTFA149C3B_28" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_29" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="a9b6fa38-f2ab-14af-cee2-80857976487b.htm">AreNotEqual(Single, Single, Single, String, <span id="LSTFA149C3B_30" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_31" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="51ae8e28-f199-2a0d-505e-1048ebfe85ae.htm">AreNotEqual(String, String, Boolean, CultureInfo, String)</a></td><td>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="8e83ca46-4753-ce10-d6b6-e64807f7ddc9.htm">AreNotEqual(String, String, Boolean, String, <span id="LSTFA149C3B_32" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_33" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </td></tr><tr><td><a href="55bb1fe4-2ad7-42ad-4c9c-e17af59344c5.htm">AreNotEqual(String, String, Boolean, CultureInfo, String, <span id="LSTFA149C3B_34" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_35" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </td></tr><tr><td><a href="ef772052-ec59-d682-7918-85ad199dffb7.htm">AreNotEqual<span id="LSTFA149C3B_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T)</a></td><td>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="cf1667b6-78a9-560c-75fd-59728a82f505.htm">AreNotEqual<span id="LSTFA149C3B_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T, String)</a></td><td>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="e727c3a6-93ce-cdee-358a-6fb03fbae902.htm">AreNotEqual<span id="LSTFA149C3B_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T, T, String, <span id="LSTFA149C3B_42" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_43" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </td></tr><tr><td><a href="1a6f0e7d-dded-ca8f-e560-9a96ba6317ee.htm">AreNotSame(Object, Object)</a></td><td>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </td></tr><tr><td><a href="b36932a2-f711-40f0-6941-5f0e47e58f32.htm">AreNotSame(Object, Object, String)</a></td><td>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </td></tr><tr><td><a href="1732b2cd-bd9f-6f68-7339-bd3912e3e82e.htm">AreNotSame(Object, Object, String, <span id="LSTFA149C3B_44" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_45" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </td></tr><tr><td><a href="7f55724c-a3f7-6eac-8593-ad7f7aab10b4.htm">AreSame(Object, Object)</a></td><td>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </td></tr><tr><td><a href="ec5ffdbd-4982-9046-7b2d-859767390734.htm">AreSame(Object, Object, String)</a></td><td>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </td></tr><tr><td><a href="501de3d2-d31e-f306-c3d6-f4a7730e5032.htm">AreSame(Object, Object, String, <span id="LSTFA149C3B_46" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_47" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </td></tr><tr><td><a href="c79a8c3f-51bd-1e1b-6162-eb95ed9d5bff.htm">CheckParameterNotNull</a></td><td>
            Checks the parameter for valid conditions
            </td></tr><tr><td><a href="6f8c4568-251e-2d74-f489-b4074df1c876.htm">CompareInternal</a></td><td> </td></tr><tr><td><span class="noLink">Equals(Object)</span></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <span class="noLink">Object</span>)</td></tr><tr><td><a href="5d9d93f8-65ff-c3aa-facc-0e01d98e3913.htm">Equals(Object, Object)</a></td><td>
            Static equals overloads are used for comparing instances of two types for reference
            equality. This method should <b>not</b> be used for comparison of two instances for
            equality. This object will <b>always</b> throw with Assert.Fail. Please use
            Assert.AreEqual and associated overloads in your unit tests.
            </td></tr><tr><td><a href="4cee893e-075c-1349-663f-8db64364f35f.htm">Fail<span id="LSTFA149C3B_48" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Throws an AssertFailedException.
            </td></tr><tr><td><a href="30392023-54c9-18cf-4fff-292a75b9d233.htm">Fail(String)</a></td><td>
            Throws an AssertFailedException.
            </td></tr><tr><td><a href="a2373e53-cf65-c5c2-5492-9adc6c230c08.htm">Fail(String, <span id="LSTFA149C3B_49" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_50" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Throws an AssertFailedException.
            </td></tr><tr><td><span class="noLink">GetHashCode</span></td><td>Serves as the default hash function. <br />(Inherited from <span class="noLink">Object</span>)</td></tr><tr><td><span class="noLink">GetType</span></td><td>Gets the <span class="noLink">Type</span> of the current instance.<br />(Inherited from <span class="noLink">Object</span>)</td></tr><tr><td><a href="c29810ca-20c8-84a8-9201-5d9f2ea756e9.htm">HandleFail</a></td><td>
            Helper function that creates and throws an AssertionFailedException
            </td></tr><tr><td><a href="881d8db7-3a51-612a-b156-9cb13cbd5e8c.htm">Inconclusive<span id="LSTFA149C3B_51" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Throws an AssertInconclusiveException.
            </td></tr><tr><td><a href="4b304842-1b47-2451-d225-582b91b8eca1.htm">Inconclusive(String)</a></td><td>
            Throws an AssertInconclusiveException.
            </td></tr><tr><td><a href="3b05d6bd-e833-9a52-7299-96c26a1bdbb1.htm">Inconclusive(String, <span id="LSTFA149C3B_52" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_53" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Throws an AssertInconclusiveException.
            </td></tr><tr><td><a href="1dcacf31-10f2-4f69-6829-003a29eb424d.htm">IsFalse(Boolean)</a></td><td>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </td></tr><tr><td><a href="79fcf6a1-0428-3b88-c994-6a59020d37e2.htm">IsFalse(Nullable<span id="LSTFA149C3B_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LSTFA149C3B_55" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </td></tr><tr><td><a href="478b072d-a866-6fd5-9bef-448b0145c004.htm">IsFalse(Boolean, String)</a></td><td>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </td></tr><tr><td><a href="258f276a-b5e8-8a80-9a95-f07c363118df.htm">IsFalse(Nullable<span id="LSTFA149C3B_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LSTFA149C3B_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </td></tr><tr><td><a href="4e0f40d9-5889-862a-cd9e-c233717334e0.htm">IsFalse(Boolean, String, <span id="LSTFA149C3B_58" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_59" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </td></tr><tr><td><a href="ba8c13ec-d9a8-2faf-e354-be47c6fbcf51.htm">IsFalse(Nullable<span id="LSTFA149C3B_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LSTFA149C3B_61" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String, <span id="LSTFA149C3B_62" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_63" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </td></tr><tr><td><a href="29b94060-0714-6bb7-05c8-bdd08c64bb9d.htm">IsInstanceOfType(Object, Type)</a></td><td>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </td></tr><tr><td><a href="42131e47-d9e3-f05d-ec24-bc15c5680c93.htm">IsInstanceOfType(Object, Type, String)</a></td><td>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </td></tr><tr><td><a href="edb64ef2-f5fa-0b35-c804-3f9a15f6ea3c.htm">IsInstanceOfType(Object, Type, String, <span id="LSTFA149C3B_64" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_65" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </td></tr><tr><td><a href="16b05811-e5e6-6775-623b-84f6b92ecf9a.htm">IsNotInstanceOfType(Object, Type)</a></td><td>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </td></tr><tr><td><a href="1cb0d3de-90c8-3da3-160f-54c4a8108c17.htm">IsNotInstanceOfType(Object, Type, String)</a></td><td>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </td></tr><tr><td><a href="5569e4ab-da18-cc88-71c6-dda07970a477.htm">IsNotInstanceOfType(Object, Type, String, <span id="LSTFA149C3B_66" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_67" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </td></tr><tr><td><a href="9d1cc098-50a0-2ea5-32f5-820ed60effb1.htm">IsNotNull(Object)</a></td><td>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </td></tr><tr><td><a href="034879d2-136e-7217-3d17-5b782f99a21b.htm">IsNotNull(Object, String)</a></td><td>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </td></tr><tr><td><a href="02f57cfc-c82e-4b0c-4819-60f6b9fba310.htm">IsNotNull(Object, String, <span id="LSTFA149C3B_68" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_69" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </td></tr><tr><td><a href="cf280b70-13e4-7102-1ebd-d4a7a3c71411.htm">IsNull(Object)</a></td><td>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </td></tr><tr><td><a href="94ad925d-d8e3-81fa-b95c-524904981250.htm">IsNull(Object, String)</a></td><td>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </td></tr><tr><td><a href="9ba42105-ac9d-116e-e9bd-5afa15d311fc.htm">IsNull(Object, String, <span id="LSTFA149C3B_70" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_71" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </td></tr><tr><td><a href="72f871f6-c7e7-0542-5f79-caa606158f6f.htm">IsTrue(Boolean)</a></td><td>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </td></tr><tr><td><a href="19dfc14d-6e0d-3d86-2a54-ec100787f2e0.htm">IsTrue(Nullable<span id="LSTFA149C3B_72" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LSTFA149C3B_73" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </td></tr><tr><td><a href="4f213e26-f599-5c5a-a674-5d7927d0266b.htm">IsTrue(Boolean, String)</a></td><td>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </td></tr><tr><td><a href="d0620da6-bf5f-e05e-9105-1d9bf2a848cf.htm">IsTrue(Nullable<span id="LSTFA149C3B_74" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LSTFA149C3B_75" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </td></tr><tr><td><a href="cd773031-956f-26d1-3a60-aa5415ff3b01.htm">IsTrue(Boolean, String, <span id="LSTFA149C3B_76" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_77" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </td></tr><tr><td><a href="de81c883-72f6-efb3-cf1e-05839108f0e4.htm">IsTrue(Nullable<span id="LSTFA149C3B_78" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LSTFA149C3B_79" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String, <span id="LSTFA149C3B_80" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_81" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </td></tr><tr><td><a href="b189cfdb-c292-a0f0-a0ab-66bfe2c8cba5.htm">ReplaceNullChars</a></td><td>
            Replaces null characters ('\0') with "\\0".
            </td></tr><tr><td><a href="db0e22ae-4ad2-1d7b-0c31-2bda773af60e.htm">ReplaceNulls</a></td><td>
            Safely converts an object to a string, handling null values and null characters.
            Null values are converted to "(null)". Null characters are converted to "\\0".
            </td></tr><tr><td><a href="18b968a2-24a9-0e7f-c5e7-d11a35ec6557.htm">ThrowsException<span id="LSTFA149C3B_82" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_83" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="10f3c90d-ff9a-ff06-ef57-4532b0c0f695.htm">ThrowsException<span id="LSTFA149C3B_84" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_85" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTFA149C3B_86" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Object<span id="LSTFA149C3B_87" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="5fdbff3a-22dc-01a2-b01d-1ef991039700.htm">ThrowsException<span id="LSTFA149C3B_88" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_89" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action, String)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="ad24e30c-7286-0f93-b57f-32cea6178d6a.htm">ThrowsException<span id="LSTFA149C3B_90" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_91" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTFA149C3B_92" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Object<span id="LSTFA149C3B_93" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="f9c18aff-e3ad-b94e-e03b-55845ef6109f.htm">ThrowsException<span id="LSTFA149C3B_94" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_95" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Action, String, <span id="LSTFA149C3B_96" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_97" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="2f66aa64-1d97-7688-c0b8-9d16af9de2ea.htm">ThrowsException<span id="LSTFA149C3B_98" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_99" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTFA149C3B_100" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Object<span id="LSTFA149C3B_101" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String, <span id="LSTFA149C3B_102" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_103" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="6d00d382-f0ec-f987-40af-484f51c05659.htm">ThrowsExceptionAsync<span id="LSTFA149C3B_104" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_105" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTFA149C3B_106" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Task<span id="LSTFA149C3B_107" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="f78b740c-dadb-8ec7-e7da-6ab61fb838f6.htm">ThrowsExceptionAsync<span id="LSTFA149C3B_108" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_109" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTFA149C3B_110" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Task<span id="LSTFA149C3B_111" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><a href="866f4db3-d084-a886-c292-e792723eda18.htm">ThrowsExceptionAsync<span id="LSTFA149C3B_112" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTFA149C3B_113" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTFA149C3B_114" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Task<span id="LSTFA149C3B_115" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String, <span id="LSTFA149C3B_116" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LSTFA149C3B_117" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Tests whether the code specified by delegate <span class="parameter">action</span> throws exact given exception of type <span class="parameter">T</span> (and not of derived type)
            and throws <span class="code">AssertFailedException</span> if code does not throws exception or throws exception of type other than <span class="parameter">T</span>.
            </td></tr><tr><td><span class="noLink">ToString</span></td><td>Returns a string that represents the current object.<br />(Inherited from <span class="noLink">Object</span>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="0bb09e49-5ad0-60e0-4101-9143abdbc394.htm">that</a></td><td> </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="153fa9a6-2752-6415-48c1-3e793872a6dd.htm">Microsoft.VisualStudio.TestTools.UnitTesting Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>